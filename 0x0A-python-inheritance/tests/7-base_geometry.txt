# 7-base_geometry.txt
# Carlos Barros <1543@holbertonschool.com>

===========================
How to Use 7-base_geometry.py
===========================

This module defines an function divides all elements of a matrix ``def integer_validator(self, name, value)``.

Usage
=====

``base_geometry(...)```  validates value
---------------------

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

    >>> bg = BaseGeometry()
    >>> print(bg.integer_validator("my_int", 12))
    None


===============
Handle error 
================

    >>> bg = BaseGeometry()
    >>> print(bg.integer_validator("my_int", None))
    Traceback (most recent call last):
    TypeError: my_int must be an integer

    >>> bg = BaseGeometry()
    >>> print(type(bg))
    <class '7-base_geometry.BaseGeometry'>

    >>> bg = BaseGeometry()
    >>> print(bg.area())
    Traceback (most recent call last):
    Exception: area() is not implemented

    >>> bg = BaseGeometry()
    >>> print(bg.integer_validator(3))
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 'value'

    >>> bg = BaseGeometry()
    >>> print(bg.integer_validator("my_int", -12))
    Traceback (most recent call last):
    ValueError: my_int must be greater than 0

    >>> bg = BaseGeometry()
    >>> print(bg.integer_validator("my_int", 1.2))
    Traceback (most recent call last):
    TypeError: my_int must be an integer
    
    >>> bg = BaseGeometry()
    >>> print(bg.integer_validator("my_int", "hello"))
    Traceback (most recent call last):
    TypeError: my_int must be an integer

    >>> bg = BaseGeometry()
    >>> print(bg.integer_validator())
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Both ``name`` and ``value`` must be provided. Otherwise, a TypeError is raised.

::

    >>> bg.integer_validator() # doctest: +NORMALIZE_WHITESPACE
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 
    'name' and 'value'

::

    >>> bg.integer_validator(None) # doctest: +NORMALIZE_WHITESPACE
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 
    'value'

The method assumes the paramter ``name`` will be a string, but ``name`` of any
type will be printed.

::

    >>> bg.integer_validator({"a": 1}, (1, 2))
    Traceback (most recent call last):
    TypeError: {'a': 1} must be an integer

But, if ``value`` is not an integer, a ``TypeError`` is raised.

::

    >>> bg.integer_validator("invalid number", "number")
    Traceback (most recent call last):
    TypeError: invalid number must be an integer

::

    >>> bg.integer_validator("invalid tuple", (1,))
    Traceback (most recent call last):
    TypeError: invalid tuple must be an integer

::

    >>> bg.integer_validator("and another", [3])
    Traceback (most recent call last):
    TypeError: and another must be an integer

::

    >>> bg.integer_validator("more invalid testing", {3, 4})
    Traceback (most recent call last):
    TypeError: more invalid testing must be an integer

::

    >>> bg.integer_validator("absolutely every possible invalid", None)
    Traceback (most recent call last):
    TypeError: absolutely every possible invalid must be an integer

And if ``value`` is an integer, but less than or equal to zero, a ValueError
is raised.

::

    >>> bg.integer_validator("invalid int", -1)
    Traceback (most recent call last):
    ValueError: invalid int must be greater than 0

::

    >>> bg.integer_validator("invalid int", 0)
    Traceback (most recent call last):
    ValueError: invalid int must be greater than 0